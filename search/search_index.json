{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"About/","text":"This is about page Add github","title":"About"},{"location":"Apache/","text":"Enable/disable site apache2 Enable site a2ensite [site] Disable site a2dissite [site] Activate rewrite on ubuntu Apache sudo a2enmod rewrite Redirect the home page via .htaccess IfModule mod_rewrite.c RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^$ /index.php?pagename=home [QSA,L] /IfModule Enable override Open file /etc/apache/sites/available/00*.cnf and add text Directory /var/www/html Options FollowSymLinks MultiViews AllowOverride All Order allow,deny allow from all /Directory s","title":"Apache"},{"location":"Apache/#enabledisable-site-apache2","text":"Enable site a2ensite [site] Disable site a2dissite [site]","title":"Enable/disable site apache2"},{"location":"Apache/#activate-rewrite-on-ubuntu","text":"Apache sudo a2enmod rewrite","title":"Activate rewrite on ubuntu"},{"location":"Apache/#redirect-the-home-page-via-htaccess","text":"IfModule mod_rewrite.c RewriteEngine On RewriteBase / RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^$ /index.php?pagename=home [QSA,L] /IfModule","title":"Redirect the home page via .htaccess"},{"location":"Apache/#enable-override","text":"Open file /etc/apache/sites/available/00*.cnf and add text Directory /var/www/html Options FollowSymLinks MultiViews AllowOverride All Order allow,deny allow from all /Directory s","title":"Enable override"},{"location":"Docker/","text":"ssh Into a Running Container Using container ID sudo docker exec -i -t container_id /bin/bash Using container name sudo docker exec -i -t container_name /bin/bash","title":"Docker"},{"location":"Docker/#ssh-into-a-running-container","text":"Using container ID sudo docker exec -i -t container_id /bin/bash Using container name sudo docker exec -i -t container_name /bin/bash","title":"ssh Into a Running Container"},{"location":"Git/","text":"Remove untracked files git Show what will be deleted with the -n option: git clean -f -n Then - beware : this will delete files - run: git clean -f If you want to also remove directories, run git clean -fd If you just want to remove ignored files, run git clean -fX If you want to remove ignored as well as non-ignored files, run git clean -fx Note the case difference on the X for the two prev commands. If clean.requireForce is set to true (the default) in your configuration, then unless you specify -f nothing will actually happen. See the git-clean docs for more information. Git Coloring enable coloring git config --global color.ui true To change a color git config color.status.changed blue git config color.status.untracked magenta","title":"Git"},{"location":"Git/#remove-untracked-files-git","text":"Show what will be deleted with the -n option: git clean -f -n Then - beware : this will delete files - run: git clean -f If you want to also remove directories, run git clean -fd If you just want to remove ignored files, run git clean -fX If you want to remove ignored as well as non-ignored files, run git clean -fx Note the case difference on the X for the two prev commands. If clean.requireForce is set to true (the default) in your configuration, then unless you specify -f nothing will actually happen. See the git-clean docs for more information.","title":"Remove untracked files git"},{"location":"Git/#git-coloring","text":"enable coloring git config --global color.ui true To change a color git config color.status.changed blue git config color.status.untracked magenta","title":"Git Coloring"},{"location":"Grant_Container_Engine_Permission/","text":"Grant Container Engine Permission Error: required container.clusters.get permission for Solution: Grant Kubernetes Engine IAM to the Container Builder service account: 1. In GCP Console, visit the IAM menu. 2. In the list of members, look for [YOUR-PROJECT-NUMBER]@cloudbuild.gserviceaccount.com. 3. Click on the pencil icon in that row to grant a new role to that account. 4. Click Add another role. 5. Select Kubernetes Engine, then click Kubernetes Engine Admin. 6. Click Save.","title":"Grant Container Engine Permission"},{"location":"Grant_Container_Engine_Permission/#grant-container-engine-permission","text":"Error: required container.clusters.get permission for Solution: Grant Kubernetes Engine IAM to the Container Builder service account: 1. In GCP Console, visit the IAM menu. 2. In the list of members, look for [YOUR-PROJECT-NUMBER]@cloudbuild.gserviceaccount.com. 3. Click on the pencil icon in that row to grant a new role to that account. 4. Click Add another role. 5. Select Kubernetes Engine, then click Kubernetes Engine Admin. 6. Click Save.","title":"Grant Container Engine Permission"},{"location":"HTTP_Load_Test/","text":"HTTP Load test Using ab that comes with apache ab -n 10000 -c 10 http://domain.com -n requests = Number of requests to perform -c concurrency = Number of multiple requests to make at a time ab -h for more","title":"HTTP Load Test"},{"location":"HTTP_Load_Test/#http-load-test","text":"Using ab that comes with apache ab -n 10000 -c 10 http://domain.com -n requests = Number of requests to perform -c concurrency = Number of multiple requests to make at a time ab -h for more","title":"HTTP Load test"},{"location":"Homebrew/","text":"Install homebrew Install Instal Location in Mac /usr/local/Cellar/ Link brew packages To use php@7.* link new installed php using home-brew which php If you see this it's the stock version /usr/bin/php If you see this you are using the Homebrew version /usr/local/bin/php To fix it reinstall and relink php using Homebrew: Reinstall PHP 7.1 brew reinstall php@7.1 check overwriting links brew link --overwrite --force --dry-run php@7.1 Overwrite brew link --overwrite --force php@7.1 Check if you're using homebrew's PHP which php php -v If there is any missing extensions, install them brew reinstall php71-xdebug php71-imagick To have launchd start php@7.1 now and restart at login: brew services start php@7.1","title":"Homebrew"},{"location":"Homebrew/#install-homebrew","text":"Install","title":"Install homebrew"},{"location":"Homebrew/#instal-location-in-mac","text":"/usr/local/Cellar/","title":"Instal Location in Mac"},{"location":"Homebrew/#link-brew-packages","text":"To use php@7.* link new installed php using home-brew which php If you see this it's the stock version /usr/bin/php If you see this you are using the Homebrew version /usr/local/bin/php To fix it reinstall and relink php using Homebrew: Reinstall PHP 7.1 brew reinstall php@7.1 check overwriting links brew link --overwrite --force --dry-run php@7.1 Overwrite brew link --overwrite --force php@7.1 Check if you're using homebrew's PHP which php php -v If there is any missing extensions, install them brew reinstall php71-xdebug php71-imagick To have launchd start php@7.1 now and restart at login: brew services start php@7.1","title":"Link brew packages"},{"location":"Install_Stack_Driver_Agent/","text":"Install the Stackdriver Monitoring Agent: curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh sudo bash install-monitoring-agent.sh Install the Stackdriver Logging Agent: curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh sudo bash install-logging-agent.sh","title":"Install Stack Driver Agent"},{"location":"Install_Stack_Driver_Agent/#install-the-stackdriver-monitoring-agent","text":"curl -sSO https://dl.google.com/cloudagents/install-monitoring-agent.sh sudo bash install-monitoring-agent.sh","title":"Install the Stackdriver Monitoring Agent:"},{"location":"Install_Stack_Driver_Agent/#install-the-stackdriver-logging-agent","text":"curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh sudo bash install-logging-agent.sh","title":"Install the Stackdriver Logging Agent:"},{"location":"Linux/","text":"Display All Permissions Display all the permissions on a path: namei -om /path/to/check","title":"Linux"},{"location":"Linux/#display-all-permissions","text":"Display all the permissions on a path: namei -om /path/to/check","title":"Display All Permissions"},{"location":"Mac/","text":"View All Users Accounts on a Mac $dscl . list /Users View All Users Accounts on a Mac dscl . list /Users Show All User Accounts, User Directories, User GECOS Info on a Mac dscacheutil -q user Show User Accounts Only $dscl . list /Users | grep -v '_' Show All User Accounts, User Directories, User GECOS Info on a Mac $dscacheutil -q user Get User Info To get user creationTime , failedLoginCount and failedLoginTimestamp dscl . read /Users/ahmedalsammarraie accountPolicyData Format usb flash drive from terminal diskutil eraseDisk JHFS+ Emptied /dev/disk6s2 FTP diskutil eraseDisk FTP32 Emptied /dev/disk6s2 Create Hidden User dscl /Local/Default -create /Users/hidden Create home directory to it dscl /Local/Default -create /Users/hidden NFSHomeDirectory /Users/hidden Give it a real name dscl /Local/Default -create /Users/hidden RealName real_name Set primary group dscl /Local/Default -create /Users/hidden PrimaryGroupID 80 User shell dscl /Local/Default -create /Users/hidden UserShell /bin/bash Unique ID dscl /Local/Default -create /Users/hidden UniqueID 499 Set password dscl /Local/Default -passwd /Users/hidden 'PASSWORD' ; Hide it dscl . create /Users/hidden IsHidden 1 ; Allow Remote Management sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -setmenuextra -menuextra yes systemsetup -f -setremotelogin on ; defaults write /Library/Preferences/com.apple.RemoteManagement LoadRemoteManagementMenuExtra -bool false Find ip\u2019s and mac address\u2019s on network arp -an Temp Files Location ~/Library/Caches/ Force Signout iCloud defaults delete MobileMeAccounts Remove iMessage history Possibly: rm ~/Library/Preferences/*.plist Instead of: cd ~/Library/Preferences rm com.apple.ids.service.com.apple.madrid.plist rm com.apple.ids.service.com.apple.private.alloy.sms.plist rm ByHost/com.apple.identityservices.idstatuscache.5A488A33-7FF1-56F5-A3F6-CBC792D5C705.plist Then: rm ~/Library/Messages/chat.db* rm -rf ~/Library/Messages/Archive rm -rf ~/Library/Messages/Attachments Restart Mac sudo shutdown -r now","title":"Mac"},{"location":"Mac/#view-all-users-accounts-on-a-mac","text":"$dscl . list /Users","title":"View All Users &amp; Accounts on a Mac"},{"location":"Mac/#view-all-users-accounts-on-a-mac_1","text":"dscl . list /Users","title":"View All Users &amp; Accounts on a Mac"},{"location":"Mac/#show-all-user-accounts-user-directories-user-gecos-info-on-a-mac","text":"dscacheutil -q user","title":"Show All User Accounts, User Directories, &amp; User GECOS Info on a Mac"},{"location":"Mac/#show-user-accounts-only","text":"$dscl . list /Users | grep -v '_'","title":"Show User Accounts Only"},{"location":"Mac/#show-all-user-accounts-user-directories-user-gecos-info-on-a-mac_1","text":"$dscacheutil -q user","title":"Show All User Accounts, User Directories, &amp; User GECOS Info on a Mac"},{"location":"Mac/#get-user-info","text":"To get user creationTime , failedLoginCount and failedLoginTimestamp dscl . read /Users/ahmedalsammarraie accountPolicyData","title":"Get User Info"},{"location":"Mac/#format-usb-flash-drive-from-terminal","text":"diskutil eraseDisk JHFS+ Emptied /dev/disk6s2 FTP diskutil eraseDisk FTP32 Emptied /dev/disk6s2","title":"Format usb flash drive from terminal"},{"location":"Mac/#create-hidden-user","text":"dscl /Local/Default -create /Users/hidden Create home directory to it dscl /Local/Default -create /Users/hidden NFSHomeDirectory /Users/hidden Give it a real name dscl /Local/Default -create /Users/hidden RealName real_name Set primary group dscl /Local/Default -create /Users/hidden PrimaryGroupID 80 User shell dscl /Local/Default -create /Users/hidden UserShell /bin/bash Unique ID dscl /Local/Default -create /Users/hidden UniqueID 499 Set password dscl /Local/Default -passwd /Users/hidden 'PASSWORD' ; Hide it dscl . create /Users/hidden IsHidden 1 ;","title":"Create Hidden User"},{"location":"Mac/#allow-remote-management","text":"sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -setmenuextra -menuextra yes systemsetup -f -setremotelogin on ; defaults write /Library/Preferences/com.apple.RemoteManagement LoadRemoteManagementMenuExtra -bool false","title":"Allow Remote Management"},{"location":"Mac/#find-ips-and-mac-addresss-on-network","text":"arp -an","title":"Find ip\u2019s and mac address\u2019s on network"},{"location":"Mac/#temp-files-location","text":"~/Library/Caches/","title":"Temp Files Location"},{"location":"Mac/#force-signout-icloud","text":"defaults delete MobileMeAccounts Remove iMessage history Possibly: rm ~/Library/Preferences/*.plist Instead of: cd ~/Library/Preferences rm com.apple.ids.service.com.apple.madrid.plist rm com.apple.ids.service.com.apple.private.alloy.sms.plist rm ByHost/com.apple.identityservices.idstatuscache.5A488A33-7FF1-56F5-A3F6-CBC792D5C705.plist Then: rm ~/Library/Messages/chat.db* rm -rf ~/Library/Messages/Archive rm -rf ~/Library/Messages/Attachments Restart Mac sudo shutdown -r now","title":"Force Signout iCloud"},{"location":"MySql/","text":"sql_mode Error \"sql_mode = ONLY_FULL_GROUP_BY\" mysql error Solution sequelPro set sql_mode = '' my.cnf remove sql_mode = ONLY_FULL_GROUP_BY from my.cnf mySql SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); Docker Container ssh into mysql container then run one of the commands above. Or in one command docker exec -ti $(docker ps -aqf name= container_name \u201d) mysql -uroot -proot -e SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')) Enable mysql local-infile insert this in /etc/mysql/my.cnf or /etc/my.cnf [mysqld] local-infile [mysql] local-infile","title":"MySql"},{"location":"MySql/#sql_mode","text":"Error \"sql_mode = ONLY_FULL_GROUP_BY\" mysql error Solution sequelPro set sql_mode = '' my.cnf remove sql_mode = ONLY_FULL_GROUP_BY from my.cnf mySql SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); Docker Container ssh into mysql container then run one of the commands above. Or in one command docker exec -ti $(docker ps -aqf name= container_name \u201d) mysql -uroot -proot -e SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''))","title":"sql_mode"},{"location":"MySql/#enable-mysql-local-infile","text":"insert this in /etc/mysql/my.cnf or /etc/my.cnf [mysqld] local-infile [mysql] local-infile","title":"Enable mysql local-infile"},{"location":"Nginx_in_Production/","text":"How to configure Nginx in production to serve an Angular app and reverse proxy NodeJS Details here","title":"Nginx in Production"},{"location":"Nginx_in_Production/#how-to-configure-nginx-in-production-to-serve-an-angular-app-and-reverse-proxy-nodejs","text":"Details here","title":"How to configure Nginx in production to serve an Angular app and reverse proxy NodeJS"},{"location":"Safari_Redirects/","text":"Safari Always Redirects localhost to https sudo killall nsurlstoraged rm -f ~/Library/Cookies/HSTS.plist launchctl start /System/Library/LaunchAgents/com.apple.nsurlstoraged.plist","title":"Safari Redirects"},{"location":"Safari_Redirects/#safari-always-redirects-localhost-to-https","text":"sudo killall nsurlstoraged rm -f ~/Library/Cookies/HSTS.plist launchctl start /System/Library/LaunchAgents/com.apple.nsurlstoraged.plist","title":"Safari Always Redirects localhost to https"},{"location":"Script_in_the_Background/","text":"Getting a Python script to run in the background (as a service) on boot Run sudo nano /etc/init/TheNameOfYourDaemon.conf Add the following: description My Daemon Job author Your Name start on runlevel [2345] pre-start script echo [`date`] My Daemon Starting /var/log/TheNameOfYourDaemonJobLog.log end script exec /bin/sh TheNameOfYourScript.sh /dev/null Save it and confirm it looks ok: init-checkconf /etc/init/TheNameOfYourDaemon.conf Now reboot the machine: sudo reboot Now when you boot up your system, you can see the log file stating that your Daemon is running: cat /var/log/TheNameOfYourDaemonJobLog.log Now you may start/stop/restart/get the status of your Daemon via: restart: this will stop, then start a service sudo service TheNameOfYourDaemonrestart restart start: this will start a service, if it's not running sudo service TheNameOfYourDaemonstart start stop: this will stop a service, if it's running sudo service TheNameOfYourDaemonstop stop status: this will display the status of a service sudo service TheNameOfYourDaemonstatus status","title":"Script in the Background"},{"location":"Script_in_the_Background/#getting-a-python-script-to-run-in-the-background-as-a-service-on-boot","text":"Run sudo nano /etc/init/TheNameOfYourDaemon.conf Add the following: description My Daemon Job author Your Name start on runlevel [2345] pre-start script echo [`date`] My Daemon Starting /var/log/TheNameOfYourDaemonJobLog.log end script exec /bin/sh TheNameOfYourScript.sh /dev/null Save it and confirm it looks ok: init-checkconf /etc/init/TheNameOfYourDaemon.conf Now reboot the machine: sudo reboot Now when you boot up your system, you can see the log file stating that your Daemon is running: cat /var/log/TheNameOfYourDaemonJobLog.log Now you may start/stop/restart/get the status of your Daemon via: restart: this will stop, then start a service sudo service TheNameOfYourDaemonrestart restart start: this will start a service, if it's not running sudo service TheNameOfYourDaemonstart start stop: this will stop a service, if it's running sudo service TheNameOfYourDaemonstop stop status: this will display the status of a service sudo service TheNameOfYourDaemonstatus status","title":"Getting a Python script to run in the background (as a service) on\u00a0boot"},{"location":"Unix/","text":"Disk Space df -h Disk size df -h Bulk chmod Change permission to all files/folders To change all the directories to 755 (drwxr-xr-x): find /opt/lampp/htdocs -type d -exec chmod 755 {} \\; To change all the files to 644 (-rw-r--r--): find /opt/lampp/htdocs -type f -exec chmod 644 {} \\; Search Text in Files Do the following: grep -rnw 'directory' -e pattern Where: -r or -R is recursive -n is line number -w stands match the whole word -l (letter L) can be added to have just the file name Along with these, --exclude or --include parameter could be used for efficient searching. Something like below: grep --include=\\*.{c,h} -rnw 'directory' -e pattern This will only search through the files which have .c or .h extensions. Similarly a sample use of --exclude : grep --exclude=*.o -rnw 'directory' -e pattern Above will exclude searching all the files ending with .o extension. Just like exclude file it's possible to exclude/include directories through --exclude-dir and --include-dir parameter, the following shows how to integrate --exclude-dir : grep --exclude-dir={dir1,dir2,*.dst} -rnw 'directory' -e pattern For more options : man grep","title":"Unix"},{"location":"Unix/#disk-space","text":"df -h","title":"Disk Space"},{"location":"Unix/#disk-size","text":"df -h","title":"Disk size"},{"location":"Unix/#bulk-chmod","text":"Change permission to all files/folders To change all the directories to 755 (drwxr-xr-x): find /opt/lampp/htdocs -type d -exec chmod 755 {} \\; To change all the files to 644 (-rw-r--r--): find /opt/lampp/htdocs -type f -exec chmod 644 {} \\;","title":"Bulk chmod"},{"location":"Unix/#search-text-in-files","text":"Do the following: grep -rnw 'directory' -e pattern Where: -r or -R is recursive -n is line number -w stands match the whole word -l (letter L) can be added to have just the file name Along with these, --exclude or --include parameter could be used for efficient searching. Something like below: grep --include=\\*.{c,h} -rnw 'directory' -e pattern This will only search through the files which have .c or .h extensions. Similarly a sample use of --exclude : grep --exclude=*.o -rnw 'directory' -e pattern Above will exclude searching all the files ending with .o extension. Just like exclude file it's possible to exclude/include directories through --exclude-dir and --include-dir parameter, the following shows how to integrate --exclude-dir : grep --exclude-dir={dir1,dir2,*.dst} -rnw 'directory' -e pattern For more options : man grep","title":"Search Text in Files"},{"location":"Wordpress/","text":"Default host To not update your DB everytime you move to local or staging , add these lines to wp-config.php define( 'WP_SITEURL', 'http://'.$_SERVER['HTTP_HOST']); define( 'WP_HOME', WP_SITEURL );","title":"Wordpress"},{"location":"Wordpress/#default-host","text":"To not update your DB everytime you move to local or staging , add these lines to wp-config.php define( 'WP_SITEURL', 'http://'.$_SERVER['HTTP_HOST']); define( 'WP_HOME', WP_SITEURL );","title":"Default host"},{"location":"javascript_substring/","text":"javascript substring String.slice( begin [, end ] ) String.substring( from [, to ] ) String.substr( start [, length ] )","title":"Javascript substring"},{"location":"javascript_substring/#javascript-substring","text":"String.slice( begin [, end ] ) String.substring( from [, to ] ) String.substr( start [, length ] )","title":"javascript substring"},{"location":"kubectl/","text":"kubctl Steps 1- Create docker image and test 2- After you\u2019re happy with the image, push it to gcr.io/project_id/img-name:img-version 3- Run next commands on google console. Creat cluster $gcloud container clusters create clus-name --num-nodes 2 --machine-type n1-standard-1 --zone us-central1-f 4- deploy $kubectl run hello-node-app --image=gcr.io/test-feb2016/hello-node:0.1 --port=8080 5- Allow external traffic $kubectl expose deployment --type=\"LoadBalancer\" Troubleshooting kubectl describe deployment wordpress kubectl logs -l app=wordpress web * kubectl logs -l app=wordpress Encrypt/decrypt files gcloud https://cloud.google.com/container-builder/docs/securing-builds/use-encrypted-secrets-credentials gcloud kms encrypt \\ --plaintext-file=secrets.json \\ --ciphertext-file=secrets.json.enc \\ --location=global \\ --keyring=[KEYRING-NAME] \\ --key=[KEY-NAME] Create cloud sql user $gcloud sql users create proxyuser cloudsqlproxy~% --instance=[INSTANCE_NAME] --password=[PASSWORD] ssh into a container $kubectl exec POD_NAME -c CONTAINR_NAME bash -ti --namespace=NAME_SPACE Enable API and Configure IAM export PROJECT=$(gcloud config get-value project) export PROJECT_ID=$(gcloud projects list --filter id=${PROJECT} --format 'value(projectNumber)') export DM_SA_EMAIL=${PROJECT_ID}@cloudservices.gserviceaccount.com gcloud services enable deploymentmanager.googleapis.com runtimeconfig.googleapis.com gcloud projects add-iam-policy-binding $PROJECT --member=serviceAccount:${DM_SA_EMAIL} --role roles/owner Create a cluster $ gcloud container clusters create \"$CLUSTER\" --zone \"$ZONE\" --num-nodes=3 OR gcloud config set project PROJECT_ID gcloud config set compute/zone us-central1-b $ gcloud container clusters create --num-nodes=3 Create namespace $ kubectl create namespace [name] Retrive cluster credentials $ gcloud container clusters get-credentials Get pods that contain name $ pods=$(kubectl get pods --show-all --selector=job-name=partpodname --output=jsonpath={.items..metadata.name}) Get project name $ export PROJECT=$(gcloud info --format='value(config.project)') Get Cluster Name $ export EAST_CLUSTER=$(gcloud container clusters list --filter=\"name:'east'\" --format=\"value(name)\") Get ingress IP $ export GKE_CENTRAL_INGRESS_IP=$(kubectl get ingress myapp-gke-central-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}' --context gke-central) export PROJECT=$(gcloud config get-value project) export PROJECT_ID=$(gcloud projects list --filter id=${PROJECT} --format 'value(projectNumber)') export DM_SA_EMAIL=${PROJECT_ID}@cloudservices.gserviceaccount.com gcloud services enable deploymentmanager.googleapis.com runtimeconfig.googleapis.com gcloud projects add-iam-policy-binding $PROJECT --member=serviceAccount:${DM_SA_EMAIL} --role roles/owner export STUDENT_VM=$(gcloud compute instances list --format='value(name)' | grep student) gcloud compute ssh $STUDENT_VM --zone=us-central1-f -- -L 8080:localhost:8080 Example of adding port to container spec: containers: - name: beanstalkd image: kicka/beanstalkd:1.10 imagePullPolicy: Always ports: - containerPort: 11300 livenessProbe: tcpSocket: port: 11300 initialDelaySeconds: 15 timeoutSeconds: 5 readinessProbe: tcpSocket: port: 11300 initialDelaySeconds: 5 timeoutSeconds: 1 ======================== Excuse a command in container spec: containers: - name: redis image: redis:3.2.1-alpine imagePullPolicy: Always ports: - containerPort: 6379 livenessProbe: exec: command: - redis-cli - ping initialDelaySeconds: 5 timeoutSeconds: 5 readinessProbe: exec: command: - redis-cli - ping initialDelaySeconds: 5 timeoutSeconds: 1 ========================","title":"Kubectl"},{"location":"php/","text":"Change php version a2dismod php5 a2enmod php7.0 service apache2 restart Find php.ini File Path php --ini | grep Loaded Configuration | sed -e s|.*:\\s*||","title":"Php"},{"location":"php/#change-php-version","text":"a2dismod php5 a2enmod php7.0 service apache2 restart","title":"Change php version"},{"location":"php/#find-phpini-file-path","text":"php --ini | grep Loaded Configuration | sed -e s|.*:\\s*||","title":"Find php.ini File Path"},{"location":"ssl/","text":"Show Public SSL Certificate This command will show you the certificate (use -showcerts as an extra parameter if you want to see the full chain): openssl s_client -connect the.host.name:443 This will get the certificate and print out the public key: openssl s_client -connect the.host.name:443 | openssl x509 -pubkey -noout","title":"Ssl"},{"location":"ssl/#show-public-ssl-certificate","text":"This command will show you the certificate (use -showcerts as an extra parameter if you want to see the full chain): openssl s_client -connect the.host.name:443 This will get the certificate and print out the public key: openssl s_client -connect the.host.name:443 | openssl x509 -pubkey -noout","title":"Show Public SSL Certificate"}]}